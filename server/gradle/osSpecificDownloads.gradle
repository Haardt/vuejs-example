import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "commons-io:commons-io:2.5"
    }
}

task downloadGeckoDriver {

    def driverOsFilenamePart
    def fileSuffix = ".tar.gz"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        driverOsFilenamePart = "win32"
        fileSuffix = ".zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        driverOsFilenamePart = "macos"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        driverOsFilenamePart = "linux64"
    }

    def outputFile = file("$buildDir/webdriver/geckodriver${fileSuffix}")
    inputs.property("geckodriver", geckoDriverVersion)
    outputs.file(outputFile)

    doLast {
        FileUtils.copyURLToFile(new URL("https://github.com/mozilla/geckodriver/releases/download/v${geckoDriverVersion}/geckodriver-v${geckoDriverVersion}-${driverOsFilenamePart}${fileSuffix}"), outputFile)
    }

}

task unzipGeckoDriver(type: Copy) {

    def outputDir = file("$buildDir/webdriver/geckodriver")
    dependsOn downloadGeckoDriver
    outputs.dir(outputDir)

    def driverArchive = downloadGeckoDriver.outputs.files.singleFile
    if (driverArchive.getName().endsWith("zip")) {
        from(zipTree(driverArchive))
    } else {
        from(tarTree(driverArchive))
    }
    into(outputDir)

}

task downloadChromeDriver {
    def outputFile = file("$buildDir/webdriver/chromedriver.zip")
    inputs.property("chromeDriverVersion", chromeDriverVersion)
    outputs.file(outputFile)

    doLast {
        def driverOsFilenamePart
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = "mac64"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        FileUtils.copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"), outputFile)
    }
}

task unzipChromeDriver(type: Copy) {
    def outputDir = file("$buildDir/webdriver/chromedriver")
    dependsOn downloadChromeDriver
    outputs.dir(outputDir)

    from(zipTree(downloadChromeDriver.outputs.files.singleFile))
    into(outputDir)
}

task downloadPhantomJs {
    def osFilenamePart
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        osFilenamePart = "windows.zip"
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        osFilenamePart = "macosx.zip"
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        osFilenamePart = Os.isArch("amd64") ? "linux-x86_64.tar.bz2" : "linux-i686.tar.bz2"
    }

    def filename = "phantomjs-$phantomJsVersion-$osFilenamePart"
    def outputFile = file("$buildDir/webdriver/$filename")
    inputs.property("phantomJsVersion", phantomJsVersion)
    outputs.file(outputFile)

    doLast {
        FileUtils.copyURLToFile(new URL("https://bitbucket.org/ariya/phantomjs/downloads/$filename"), outputFile)
    }
}

task unzipPhantomJs(type: Copy) {
    def outputDir = file("$buildDir/webdriver/phantomjs")
    dependsOn downloadPhantomJs
    outputs.dir(outputDir)

    def archive = downloadPhantomJs.outputs.files.singleFile

    from(Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(archive) : tarTree(archive))
    into(outputDir)
    eachFile { FileCopyDetails fcp ->
        fcp.relativePath = new RelativePath(!fcp.directory, *fcp.relativePath.segments[1..-1])
    }
}
